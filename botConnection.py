import logging
from dataBase import DB
import keyboards as kb

from aiogram import Bot, Dispatcher, executor, types

db = DB()

API_TOKEN = db.getFirstRow("tokens")

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

###–ö–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'start' or c.data == "backToMenu") 
async def process_callback_button1(callback_query: types.CallbackQuery):
    if (not len(db.findUserById(callback_query.from_user.id))):
        db.createNewUser(str(callback_query.from_user.id))
        db.createNewWallet(str(callback_query.from_user.id))
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?", reply_markup=kb.inline_kb2)

@dp.callback_query_handler(lambda c: c.data == 'cabinet')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=kb.cabinetKB)

@dp.callback_query_handler(lambda c: c.data == 'store')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ?", reply_markup=kb.buyKB)

@dp.callback_query_handler(lambda c: c.data == 'tradeBtn')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–í—ã –æ—Ç–¥–∞–µ—Ç–µ: ", reply_markup=kb.trade1KB)

@dp.callback_query_handler(lambda c: c.data == 'balance')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    balance = db.getWalletBuyUserId(callback_query.from_user.id)
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=
    f"""
    –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    üê•–ë–∞–±–∞–Ω–æ–∫–æ–∏–Ω: ({balance[2]})
    –ú–Ω–µ–ø–æ—Ö—É–π—Ç–æ–∫–µ–Ω: ({balance[3]})
    –ì–æ—Å–ª–∏–Ω–≥–∫–æ–∏–Ω: ({balance[4]})
    –†—ç–¥–î—É–±–ª–æ–Ω: ({balance[5]})
    –ü–æ–ø–∞–∫–æ–∏–Ω: ({balance[6]})
    üëæ–î—É—à–Ω–∏–ª–∞—Ç–æ–∫–∏–Ω: ({balance[7]})
    üï∑–ø–∞–∞–∞–∞–∫–æ–∏–Ω): ({balance[8]})
    üíä–¢—É—Ä–∏–Ω–∞—Ä–∏—É–º: ({balance[9]})
    –ß–∞–∫-–ß–∞–∫: ({balance[10]})
    ü¶Ω–î–æ—Ö–ª–∞—è–ú–æ–Ω–µ—Ç–∞: ({balance[11]})
    """, reply_markup=kb.cabinetKB)

###–ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):

    
    await message.answer(
        """

    –ü—Ä–∏–≤–µ—Ç!
    –Ø –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–µ–∫–µ—Å—Ç–∞–Ω—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫—Ä–∏–ø—Ç–µ!
    –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–∏ (–∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏) —Ç–æ–∫–µ–Ω—ã
    –∞ —Ç–∞–∫ –∂–µ –ø–æ–∫—É–ø–∞—Ç—å –∑–∞ –Ω–∏—Ö —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª—É–≥–∏.
    
    –ù–∞—á–Ω–µ–º?
    """,
    reply_markup=kb.inline_kb1
    )

###–í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
@dp.message_handler()
async def nonExistingCommand(message: types.Message):
    if (message.text[0] == "/"):
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. \n–ú–Ω–µ –ø–æ—Ö—É–π.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)